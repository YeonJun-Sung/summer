<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="listRest">
	<select id="getList" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM list_contents a
			LEFT OUTER JOIN list_priority b
			on a.list_key = b.list_key
			LEFT OUTER JOIN list_status c
			on a.list_key = c.list_key
		<if test='check.equals("pri")'>
		WHERE list_stat = 1 or list_stat = 2
		</if>
		<if test='check.equals("expire")'>
		WHERE list_stat = -1 or list_stat = 0
		</if>
		<if test='check.equals("expire")'>
		ORDER BY list_stat DESC
		</if>
		<if test='!check.equals("expire")'>
		ORDER BY list_pri is null ASC, list_pri ASC, list_stat ASC, list_date ASC
		</if>
		limit 10
		offset ${offset};
	</select>
	
	<select id="getListSize" parameterType="hashmap" resultType="Integer">
		SELECT count(*)
		FROM list_status
		<if test='check.equals("pri")'>
		WHERE list_stat = 1 or list_stat = 2
		</if>
		<if test='check.equals("expire")'>
		WHERE list_stat = -1 or list_stat = 0
		</if>
	</select>
	
	<update id="editTodo" parameterType="hashmap">
		UPDATE list_contents
		SET
			list_subject = #{subject}
			, list_content = #{contents}
		WHERE list_key = #{list_key}
	</update>
	
	<update id="editTodoDate" parameterType="hashmap">
		UPDATE list_status
		SET
			list_date = #{date}
		WHERE list_key = #{list_key}
	</update>
	
	<delete id="deleteTodo" parameterType="hashmap">
		<foreach collection="list" item="up" separator=";">
		DELETE FROM list_contents WHERE list_key = #{up.list_key}
		</foreach>
	</delete>
	
	<delete id="deleteTodoPriority" parameterType="hashmap">
		<foreach collection="list" item="up" separator=";">
		DELETE FROM list_priority WHERE list_key = #{up.list_key}
		</foreach>
	</delete>
	
	<delete id="deleteTodoStatus" parameterType="hashmap">
		<foreach collection="list" item="up" separator=";">
		DELETE FROM list_status WHERE list_key = #{up.list_key}
		</foreach>
	</delete>

	<update id="pushPriorityNum" parameterType="hashmap">
		UPDATE list_priority
		SET
			list_pri = list_pri + 1
		WHERE list_pri is not null
			and list_pri <![CDATA[>=]]> ${priority}
			<if test='pre_priority != null'>
			and list_pri <![CDATA[<=]]> ${pre_priority}
			</if>
	</update>
	
	<update id="setPriority" parameterType="hashmap">
		UPDATE list_priority
		SET
			list_pri = ${priority}
		WHERE list_key = #{list_key}
	</update>
	
	<update id="updateStatus" parameterType="hashmap">
		UPDATE list_status
		SET
			list_stat = #{status}
		WHERE list_key = #{list_key}
	</update>
	
	<select id="getPriority" parameterType="hashmap" resultType="String">
		SELECT list_pri
		FROM list_priority
		WHERE list_key = #{list_key}
	</select>
	
	<update id="removePriority" parameterType="hashmap">
		UPDATE list_priority
		SET
			list_pri = null
		WHERE list_key = #{list_key}
	</update>

	<update id="pullPriorityNum" parameterType="hashmap">
		UPDATE list_priority
		SET
			list_pri = list_pri - 1
		WHERE list_pri is not null
			<if test='pre_priority != null and priority != null'>
			and list_pri <![CDATA[>=]]> ${pre_priority}
			and list_pri <![CDATA[<=]]> ${priority}
			</if>
			<if test='pre_priority == null and priority != null'>
			and list_pri <![CDATA[>=]]> ${priority}
			</if>
	</update>
	
	<update id="completeTodo" parameterType="hashmap">
		UPDATE list_status
		SET
			list_stat = 3
		WHERE list_key = #{list_key}
	</update>
</mapper>